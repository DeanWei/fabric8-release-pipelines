#!/usr/bin/groovy
try {
  node{
    hubot room: 'release', message: "${env.JOB_NAME} release started"

    def quickstartsPipeline
    def quickstartsUpdateDepsPrId
    def quickstartsStagedProject

    def forgePipeline
    def forgeUpdateDepsPrId
    def forgeStagedProject

    stage 'Update ipaas-quickstarts deps'
    ws ('quickstart'){
      git 'https://github.com/fabric8io/ipaas-quickstarts.git'
      sh "git remote set-url origin git@github.com:fabric8io/ipaas-quickstarts.git"
      quickstartsPipeline = load 'release.groovy'
      quickstartsUpdateDepsPrId = quickstartsPipeline.updateDependencies('https://oss.sonatype.org/content/repositories/staging/')

      stage 'Stage ipaas-quickstarts'
      quickstartsStagedProject = quickstartsPipeline.stage()
    }

    stage 'Update fabric8-forge deps'
    ws ('forge'){
      git 'https://github.com/fabric8io/fabric8-forge.git'
      sh "git remote set-url origin git@github.com:fabric8io/fabric8-forge.git"
      forgePipeline = load 'release.groovy'
      forgeUpdateDepsPrId = forgePipeline.updateDependencies('https://oss.sonatype.org/content/repositories/staging/')

      stage 'Stage fabric8-forge'
      forgeStagedProject = forgePipeline.stage()
    }

    //stage 'Deploy'
    //consolePipeline.deploy(OPENSHIFT_URL, OPENSHIFT_DOMAIN, KUBERNETES_URL, KUBERNETES_DEFAULT_NAMESPACE, OPENSHIFT_STAGING_DOCKER_REGISTRY_URL, KUBERNETES_STAGING_DOCKER_REGISTRY_URL)

    // stage 'Approve release'
    // try {
    //   forgePipeline.approveRelease(forgeStagedProject)
    // } catch (err) {
    //
    //   // fabric8Pipeline.drop(devopsStagedProject, devopsUpdateDepsPrId)
    //   // quickstartsPipeline.drop(quickstartsStagedProject, quickstartsUpdateDepsPrId)
    //   // forgePipeline.drop(forgeStagedProject, forgeUpdateDepsPrId)
    //
    //   throw err
    // }
    //
    // stage 'Promote'

    parallel(
      quickstarts: {
        node {
          ws ('quickstarts'){
            quickstartsPipeline.release(quickstartsStagedProject)
            if (quickstartsUpdateDepsPrId != null){
              quickstartsPipeline.mergePullRequest(quickstartsUpdateDepsPrId)
            }
          }
        }
      },
      forge:{
        node {
          ws ('forge'){
            forgePipeline.release(forgeStagedProject)
            if (forgeUpdateDepsPrId != null){
              forgePipeline.mergePullRequest(forgeUpdateDepsPrId)
            }
          }
        }
      }
    )

  }
  hubot room: 'release', message: "${env.JOB_NAME} release successful"
} catch (err){
  hubot room: 'release', message: "${env.JOB_NAME} release failed ${err}"
  currentBuild.result = 'FAILURE'
}
