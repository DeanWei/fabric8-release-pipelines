#!/usr/bin/groovy
try {
  node{
    hubot room: 'release', message: "${env.JOB_NAME} release started"

    def quickstartsPipeline
    def forgePipeline
    def stagedQuickstartsProject
    def stagedForgeProject
    def pipelineForgePrId
    def quickstartsPipelinePrId

    stage 'Update ipaas-quickstarts deps'
    ws ('quickstarts'){
      git 'https://github.com/fabric8io/ipaas-quickstarts.git'
      sh "git remote set-url origin git@github.com:fabric8io/ipaas-quickstarts.git"
      quickstartsPipeline = load 'release.groovy'
      quickstartsPipelinePrId = quickstartsPipeline.updateDependencies('http://central.maven.org/maven2/')

      stage 'Stage ipaas-quickstarts'
      stagedQuickstartsProject = quickstartsPipeline.stage()
    }

    stage 'Update fabric8-forge deps'
    ws ('forge'){
      git 'https://github.com/fabric8io/fabric8-forge.git'
      sh "git remote set-url origin git@github.com:fabric8io/fabric8-forge.git"
      forgePipeline = load 'release.groovy'
      pipelineForgePrId = forgePipeline.updateDependencies('https://oss.sonatype.org/content/repositories/staging/')

      stage 'Stage fabric8-forge'
      stagedForgeProject = forgePipeline.stage()
    }

    stage 'Promote ipaas-quickstarts'
    ws ('quickstarts'){
      quickstartsPipeline.release(stagedQuickstartsProject)
      if (quickstartsPipelinePrId != null){
        quickstartsPipeline.mergePullRequest(quickstartsPipelinePrId)
      }
    }

    stage 'Promote fabric8-forge'
    ws ('forge'){
      forgePipeline.release(stagedForgeProject)
      if (pipelineForgePrId != null){
        forgePipeline.mergePullRequest(pipelineForgePrId)
      }
    }
  }
  hubot room: 'release', message: "${env.JOB_NAME} release successful"
} catch (err){
  hubot room: 'release', message: "${env.JOB_NAME} release failed ${err}"
  currentBuild.result = 'FAILURE'
}
